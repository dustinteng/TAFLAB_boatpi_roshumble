[0.000000] (-) TimerEvent: {}
[0.001584] (boat_control_system) JobQueued: {'identifier': 'boat_control_system', 'dependencies': OrderedDict()}
[0.001864] (boat_control_system) JobStarted: {'identifier': 'boat_control_system'}
[0.050659] (boat_control_system) JobProgress: {'identifier': 'boat_control_system', 'progress': 'cmake'}
[0.052268] (boat_control_system) Command: {'cmd': ['/usr/bin/cmake', '/home/boat/Desktop/src/Control/boat_control_system', '-DCMAKE_INSTALL_PREFIX=/home/boat/Desktop/src/Control/install/boat_control_system'], 'cwd': '/home/boat/Desktop/src/Control/build/boat_control_system', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'boat'), ('SSH_CLIENT', '10.41.245.123 50137 22'), ('XDG_SESSION_TYPE', 'tty'), ('GIT_ASKPASS', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/extensions/git/dist/askpass.sh'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/aarch64-linux-gnu:/opt/ros/humble/lib'), ('BROWSER', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/bin/helpers/browser.sh'), ('MOTD_SHOWN', 'pam'), ('HOME', '/home/boat'), ('TERM_PROGRAM_VERSION', '1.95.2'), ('VSCODE_IPC_HOOK_CLI', '/run/user/1000/vscode-ipc-d37b1f91-ba7d-43d6-8191-836267d04a5b.sock'), ('ROS_PYTHON_VERSION', '3'), ('VSCODE_GIT_ASKPASS_MAIN', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/extensions/git/dist/askpass-main.js'), ('VSCODE_GIT_ASKPASS_NODE', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/node'), ('SSL_CERT_FILE', '/usr/lib/ssl/certs/ca-certificates.crt'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'boat'), ('_', '/home/boat/.local/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('TERM', 'xterm-256color'), ('XDG_SESSION_ID', '7'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/bin/remote-cli:/home/boat/.local/bin:/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/boat/.local/bin:/home/boat/.local/bin:/home/boat/.local/bin:/home/boat/.local/bin'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('SSL_CERT_DIR', '/usr/lib/ssl/certs'), ('LANG', 'en_US.UTF-8'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('VSCODE_GIT_IPC_HANDLE', '/run/user/1000/vscode-git-1589bd5665.sock'), ('TERM_PROGRAM', 'vscode'), ('AMENT_PREFIX_PATH', '/opt/ros/humble'), ('SHELL', '/bin/bash'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('VSCODE_GIT_ASKPASS_EXTRA_ARGS', ''), ('PWD', '/home/boat/Desktop/src/Control/build/boat_control_system'), ('LC_ALL', 'en_US.UTF-8'), ('SSH_CONNECTION', '10.41.245.123 50137 10.41.221.43 22'), ('XDG_DATA_DIRS', '/usr/share/gnome:/usr/local/share:/usr/share:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('CMAKE_PREFIX_PATH', '/opt/ros/humble')]), 'shell': False}
[0.097401] (-) TimerEvent: {}
[0.198154] (-) TimerEvent: {}
[0.299078] (-) TimerEvent: {}
[0.399983] (-) TimerEvent: {}
[0.500907] (-) TimerEvent: {}
[0.601707] (-) TimerEvent: {}
[0.702660] (-) TimerEvent: {}
[0.723482] (boat_control_system) StdoutLine: {'line': b'-- The C compiler identification is GNU 11.4.0\n'}
[0.802908] (-) TimerEvent: {}
[0.903874] (-) TimerEvent: {}
[1.004900] (-) TimerEvent: {}
[1.105806] (-) TimerEvent: {}
[1.206743] (-) TimerEvent: {}
[1.296507] (boat_control_system) StdoutLine: {'line': b'-- The CXX compiler identification is GNU 11.4.0\n'}
[1.306946] (-) TimerEvent: {}
[1.351993] (boat_control_system) StdoutLine: {'line': b'-- Detecting C compiler ABI info\n'}
[1.407135] (-) TimerEvent: {}
[1.507863] (-) TimerEvent: {}
[1.608772] (-) TimerEvent: {}
[1.709605] (-) TimerEvent: {}
[1.762482] (boat_control_system) StdoutLine: {'line': b'-- Detecting C compiler ABI info - done\n'}
[1.792796] (boat_control_system) StdoutLine: {'line': b'-- Check for working C compiler: /usr/bin/cc - skipped\n'}
[1.797228] (boat_control_system) StdoutLine: {'line': b'-- Detecting C compile features\n'}
[1.802236] (boat_control_system) StdoutLine: {'line': b'-- Detecting C compile features - done\n'}
[1.809783] (-) TimerEvent: {}
[1.820584] (boat_control_system) StdoutLine: {'line': b'-- Detecting CXX compiler ABI info\n'}
[1.909987] (-) TimerEvent: {}
[2.010726] (-) TimerEvent: {}
[2.111573] (-) TimerEvent: {}
[2.212392] (-) TimerEvent: {}
[2.237844] (boat_control_system) StdoutLine: {'line': b'-- Detecting CXX compiler ABI info - done\n'}
[2.268851] (boat_control_system) StdoutLine: {'line': b'-- Check for working CXX compiler: /usr/bin/c++ - skipped\n'}
[2.270044] (boat_control_system) StdoutLine: {'line': b'-- Detecting CXX compile features\n'}
[2.271823] (boat_control_system) StdoutLine: {'line': b'-- Detecting CXX compile features - done\n'}
[2.312594] (-) TimerEvent: {}
[2.321627] (boat_control_system) StdoutLine: {'line': b'-- Found ament_cmake: 1.3.10 (/opt/ros/humble/share/ament_cmake/cmake)\n'}
[2.412904] (-) TimerEvent: {}
[2.513700] (-) TimerEvent: {}
[2.614395] (-) TimerEvent: {}
[2.715160] (-) TimerEvent: {}
[2.815974] (-) TimerEvent: {}
[2.916857] (-) TimerEvent: {}
[3.017573] (-) TimerEvent: {}
[3.118397] (-) TimerEvent: {}
[3.188893] (boat_control_system) StdoutLine: {'line': b'-- Found Python3: /usr/bin/python3 (found version "3.10.12") found components: Interpreter \n'}
[3.218585] (-) TimerEvent: {}
[3.319326] (-) TimerEvent: {}
[3.420001] (-) TimerEvent: {}
[3.521029] (-) TimerEvent: {}
[3.622201] (-) TimerEvent: {}
[3.723158] (-) TimerEvent: {}
[3.823856] (-) TimerEvent: {}
[3.895166] (boat_control_system) StdoutLine: {'line': b'-- Found rclcpp: 16.0.10 (/opt/ros/humble/share/rclcpp/cmake)\n'}
[3.924031] (-) TimerEvent: {}
[4.024849] (-) TimerEvent: {}
[4.125649] (-) TimerEvent: {}
[4.226427] (-) TimerEvent: {}
[4.327179] (-) TimerEvent: {}
[4.383300] (boat_control_system) StdoutLine: {'line': b'-- Found rosidl_generator_c: 3.1.5 (/opt/ros/humble/share/rosidl_generator_c/cmake)\n'}
[4.427361] (-) TimerEvent: {}
[4.441165] (boat_control_system) StdoutLine: {'line': b'-- Found rosidl_adapter: 3.1.5 (/opt/ros/humble/share/rosidl_adapter/cmake)\n'}
[4.525230] (boat_control_system) StdoutLine: {'line': b'-- Found rosidl_generator_cpp: 3.1.5 (/opt/ros/humble/share/rosidl_generator_cpp/cmake)\n'}
[4.527522] (-) TimerEvent: {}
[4.628302] (-) TimerEvent: {}
[4.632705] (boat_control_system) StdoutLine: {'line': b'-- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c\n'}
[4.728499] (-) TimerEvent: {}
[4.780759] (boat_control_system) StdoutLine: {'line': b'-- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp\n'}
[4.828684] (-) TimerEvent: {}
[4.929447] (-) TimerEvent: {}
[5.030333] (-) TimerEvent: {}
[5.131049] (-) TimerEvent: {}
[5.187813] (boat_control_system) StdoutLine: {'line': b'-- Found rmw_implementation_cmake: 6.1.2 (/opt/ros/humble/share/rmw_implementation_cmake/cmake)\n'}
[5.219366] (boat_control_system) StdoutLine: {'line': b'-- Found rmw_fastrtps_cpp: 6.2.7 (/opt/ros/humble/share/rmw_fastrtps_cpp/cmake)\n'}
[5.231318] (-) TimerEvent: {}
[5.332283] (-) TimerEvent: {}
[5.433126] (-) TimerEvent: {}
[5.534598] (-) TimerEvent: {}
[5.635280] (-) TimerEvent: {}
[5.736021] (-) TimerEvent: {}
[5.836948] (-) TimerEvent: {}
[5.923289] (boat_control_system) StdoutLine: {'line': b'-- Found OpenSSL: /usr/lib/aarch64-linux-gnu/libcrypto.so (found version "3.0.2")  \n'}
[5.937177] (-) TimerEvent: {}
[6.037971] (-) TimerEvent: {}
[6.138704] (-) TimerEvent: {}
[6.230620] (boat_control_system) StdoutLine: {'line': b'-- Found FastRTPS: /opt/ros/humble/include  \n'}
[6.238838] (-) TimerEvent: {}
[6.339583] (-) TimerEvent: {}
[6.440449] (-) TimerEvent: {}
[6.541166] (-) TimerEvent: {}
[6.641859] (-) TimerEvent: {}
[6.721684] (boat_control_system) StdoutLine: {'line': b"-- Using RMW implementation 'rmw_fastrtps_cpp' as default\n"}
[6.742033] (-) TimerEvent: {}
[6.821179] (boat_control_system) StdoutLine: {'line': b'-- Looking for pthread.h\n'}
[6.842536] (-) TimerEvent: {}
[6.943401] (-) TimerEvent: {}
[7.044253] (-) TimerEvent: {}
[7.145084] (-) TimerEvent: {}
[7.235787] (boat_control_system) StdoutLine: {'line': b'-- Looking for pthread.h - found\n'}
[7.240049] (boat_control_system) StdoutLine: {'line': b'-- Performing Test CMAKE_HAVE_LIBC_PTHREAD\n'}
[7.245516] (-) TimerEvent: {}
[7.347021] (-) TimerEvent: {}
[7.447962] (-) TimerEvent: {}
[7.548794] (-) TimerEvent: {}
[7.637020] (boat_control_system) StdoutLine: {'line': b'-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success\n'}
[7.642779] (boat_control_system) StdoutLine: {'line': b'-- Found Threads: TRUE  \n'}
[7.648920] (-) TimerEvent: {}
[7.749649] (-) TimerEvent: {}
[7.850374] (-) TimerEvent: {}
[7.951109] (-) TimerEvent: {}
[8.036711] (boat_control_system) StdoutLine: {'line': b'-- Found geometry_msgs: 4.2.4 (/opt/ros/humble/share/geometry_msgs/cmake)\n'}
[8.051477] (-) TimerEvent: {}
[8.148878] (boat_control_system) StdoutLine: {'line': b'-- Found sensor_msgs: 4.2.4 (/opt/ros/humble/share/sensor_msgs/cmake)\n'}
[8.151614] (-) TimerEvent: {}
[8.252285] (-) TimerEvent: {}
[8.266074] (boat_control_system) StdoutLine: {'line': b'-- Found rosidl_default_generators: 1.2.0 (/opt/ros/humble/share/rosidl_default_generators/cmake)\n'}
[8.352449] (-) TimerEvent: {}
[8.364715] (boat_control_system) StdoutLine: {'line': b'-- Found ament_lint_auto: 0.12.11 (/opt/ros/humble/share/ament_lint_auto/cmake)\n'}
[8.452646] (-) TimerEvent: {}
[8.553423] (-) TimerEvent: {}
[8.654279] (-) TimerEvent: {}
[8.755260] (-) TimerEvent: {}
[8.856065] (-) TimerEvent: {}
[8.902286] (boat_control_system) StdoutLine: {'line': b"-- Added test 'cppcheck' to perform static code analysis on C / C++ code\n"}
[8.903997] (boat_control_system) StdoutLine: {'line': b'-- Configured cppcheck include dirs: /home/boat/Desktop/src/Control/boat_control_system/include;/home/boat/Desktop/src/Control/boat_control_system/include/boat_control_system\n'}
[8.904555] (boat_control_system) StdoutLine: {'line': b'-- Configured cppcheck exclude dirs and/or files: \n'}
[8.912210] (boat_control_system) StdoutLine: {'line': b"-- Added test 'lint_cmake' to check CMake code style\n"}
[8.929518] (boat_control_system) StdoutLine: {'line': b"-- Added test 'uncrustify' to check C / C++ code style\n"}
[8.930187] (boat_control_system) StdoutLine: {'line': b'-- Configured uncrustify additional arguments: \n'}
[8.934062] (boat_control_system) StdoutLine: {'line': b"-- Added test 'xmllint' to check XML markup files\n"}
[8.944491] (boat_control_system) StdoutLine: {'line': b'-- Configuring done\n'}
[8.956229] (-) TimerEvent: {}
[9.053267] (boat_control_system) StdoutLine: {'line': b'-- Generating done\n'}
[9.056389] (-) TimerEvent: {}
[9.064639] (boat_control_system) StdoutLine: {'line': b'-- Build files have been written to: /home/boat/Desktop/src/Control/build/boat_control_system\n'}
[9.103075] (boat_control_system) CommandEnded: {'returncode': 0}
[9.105283] (boat_control_system) JobProgress: {'identifier': 'boat_control_system', 'progress': 'build'}
[9.110858] (boat_control_system) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/boat/Desktop/src/Control/build/boat_control_system', '--', '-j4', '-l4'], 'cwd': '/home/boat/Desktop/src/Control/build/boat_control_system', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'boat'), ('SSH_CLIENT', '10.41.245.123 50137 22'), ('XDG_SESSION_TYPE', 'tty'), ('GIT_ASKPASS', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/extensions/git/dist/askpass.sh'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/aarch64-linux-gnu:/opt/ros/humble/lib'), ('BROWSER', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/bin/helpers/browser.sh'), ('MOTD_SHOWN', 'pam'), ('HOME', '/home/boat'), ('TERM_PROGRAM_VERSION', '1.95.2'), ('VSCODE_IPC_HOOK_CLI', '/run/user/1000/vscode-ipc-d37b1f91-ba7d-43d6-8191-836267d04a5b.sock'), ('ROS_PYTHON_VERSION', '3'), ('VSCODE_GIT_ASKPASS_MAIN', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/extensions/git/dist/askpass-main.js'), ('VSCODE_GIT_ASKPASS_NODE', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/node'), ('SSL_CERT_FILE', '/usr/lib/ssl/certs/ca-certificates.crt'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'boat'), ('_', '/home/boat/.local/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('TERM', 'xterm-256color'), ('XDG_SESSION_ID', '7'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/bin/remote-cli:/home/boat/.local/bin:/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/boat/.local/bin:/home/boat/.local/bin:/home/boat/.local/bin:/home/boat/.local/bin'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('SSL_CERT_DIR', '/usr/lib/ssl/certs'), ('LANG', 'en_US.UTF-8'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('VSCODE_GIT_IPC_HANDLE', '/run/user/1000/vscode-git-1589bd5665.sock'), ('TERM_PROGRAM', 'vscode'), ('AMENT_PREFIX_PATH', '/opt/ros/humble'), ('SHELL', '/bin/bash'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('VSCODE_GIT_ASKPASS_EXTRA_ARGS', ''), ('PWD', '/home/boat/Desktop/src/Control/build/boat_control_system'), ('LC_ALL', 'en_US.UTF-8'), ('SSH_CONNECTION', '10.41.245.123 50137 10.41.221.43 22'), ('XDG_DATA_DIRS', '/usr/share/gnome:/usr/local/share:/usr/share:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('CMAKE_PREFIX_PATH', '/opt/ros/humble')]), 'shell': False}
[9.156599] (-) TimerEvent: {}
[9.257360] (-) TimerEvent: {}
[9.358096] (-) TimerEvent: {}
[9.361035] (boat_control_system) StdoutLine: {'line': b'[ 14%] \x1b[32mBuilding CXX object CMakeFiles/coordinate_calculations_lib.dir/src/Coordinate_Calculations.cpp.o\x1b[0m\n'}
[9.458307] (-) TimerEvent: {}
[9.559019] (-) TimerEvent: {}
[9.659779] (-) TimerEvent: {}
[9.760508] (-) TimerEvent: {}
[9.862742] (-) TimerEvent: {}
[9.963522] (-) TimerEvent: {}
[10.064355] (-) TimerEvent: {}
[10.165097] (-) TimerEvent: {}
[10.265787] (-) TimerEvent: {}
[10.366518] (-) TimerEvent: {}
[10.467212] (-) TimerEvent: {}
[10.568065] (-) TimerEvent: {}
[10.669853] (-) TimerEvent: {}
[10.770639] (-) TimerEvent: {}
[10.871474] (-) TimerEvent: {}
[10.972327] (-) TimerEvent: {}
[11.073094] (-) TimerEvent: {}
[11.173923] (-) TimerEvent: {}
[11.274669] (-) TimerEvent: {}
[11.375508] (-) TimerEvent: {}
[11.476419] (-) TimerEvent: {}
[11.577328] (-) TimerEvent: {}
[11.678107] (-) TimerEvent: {}
[11.778851] (-) TimerEvent: {}
[11.879586] (-) TimerEvent: {}
[11.980301] (-) TimerEvent: {}
[12.081043] (-) TimerEvent: {}
[12.181816] (-) TimerEvent: {}
[12.282675] (-) TimerEvent: {}
[12.383457] (-) TimerEvent: {}
[12.484261] (-) TimerEvent: {}
[12.585367] (-) TimerEvent: {}
[12.686396] (-) TimerEvent: {}
[12.787191] (-) TimerEvent: {}
[12.887968] (-) TimerEvent: {}
[12.988837] (-) TimerEvent: {}
[13.089679] (-) TimerEvent: {}
[13.190538] (-) TimerEvent: {}
[13.291278] (-) TimerEvent: {}
[13.392076] (-) TimerEvent: {}
[13.492859] (-) TimerEvent: {}
[13.593639] (-) TimerEvent: {}
[13.694434] (-) TimerEvent: {}
[13.795239] (-) TimerEvent: {}
[13.896049] (-) TimerEvent: {}
[13.996917] (-) TimerEvent: {}
[14.097849] (-) TimerEvent: {}
[14.198838] (-) TimerEvent: {}
[14.299975] (-) TimerEvent: {}
[14.400724] (-) TimerEvent: {}
[14.501518] (-) TimerEvent: {}
[14.602357] (-) TimerEvent: {}
[14.703124] (-) TimerEvent: {}
[14.803886] (-) TimerEvent: {}
[14.904786] (-) TimerEvent: {}
[15.005550] (-) TimerEvent: {}
[15.106316] (-) TimerEvent: {}
[15.207079] (-) TimerEvent: {}
[15.307959] (-) TimerEvent: {}
[15.408797] (-) TimerEvent: {}
[15.509571] (-) TimerEvent: {}
[15.610434] (-) TimerEvent: {}
[15.711229] (-) TimerEvent: {}
[15.812026] (-) TimerEvent: {}
[15.912880] (-) TimerEvent: {}
[16.013649] (-) TimerEvent: {}
[16.114430] (-) TimerEvent: {}
[16.215216] (-) TimerEvent: {}
[16.316031] (-) TimerEvent: {}
[16.416920] (-) TimerEvent: {}
[16.517696] (-) TimerEvent: {}
[16.618450] (-) TimerEvent: {}
[16.719242] (-) TimerEvent: {}
[16.820037] (-) TimerEvent: {}
[16.920863] (-) TimerEvent: {}
[17.021645] (-) TimerEvent: {}
[17.122433] (-) TimerEvent: {}
[17.223216] (-) TimerEvent: {}
[17.323997] (-) TimerEvent: {}
[17.424917] (-) TimerEvent: {}
[17.525661] (-) TimerEvent: {}
[17.626475] (-) TimerEvent: {}
[17.727289] (-) TimerEvent: {}
[17.828057] (-) TimerEvent: {}
[17.928871] (-) TimerEvent: {}
[18.029622] (-) TimerEvent: {}
[18.130386] (-) TimerEvent: {}
[18.231180] (-) TimerEvent: {}
[18.331947] (-) TimerEvent: {}
[18.432783] (-) TimerEvent: {}
[18.533535] (-) TimerEvent: {}
[18.634283] (-) TimerEvent: {}
[18.735055] (-) TimerEvent: {}
[18.835890] (-) TimerEvent: {}
[18.936806] (-) TimerEvent: {}
[19.037595] (-) TimerEvent: {}
[19.138464] (-) TimerEvent: {}
[19.239241] (-) TimerEvent: {}
[19.339994] (-) TimerEvent: {}
[19.440836] (-) TimerEvent: {}
[19.541621] (-) TimerEvent: {}
[19.642423] (-) TimerEvent: {}
[19.743242] (-) TimerEvent: {}
[19.844105] (-) TimerEvent: {}
[19.944930] (-) TimerEvent: {}
[20.045738] (-) TimerEvent: {}
[20.146567] (-) TimerEvent: {}
[20.247383] (-) TimerEvent: {}
[20.348277] (-) TimerEvent: {}
[20.449139] (-) TimerEvent: {}
[20.549897] (-) TimerEvent: {}
[20.650731] (-) TimerEvent: {}
[20.751621] (-) TimerEvent: {}
[20.852543] (-) TimerEvent: {}
[20.953425] (-) TimerEvent: {}
[21.054240] (-) TimerEvent: {}
[21.155060] (-) TimerEvent: {}
[21.256070] (-) TimerEvent: {}
[21.357090] (-) TimerEvent: {}
[21.457972] (-) TimerEvent: {}
[21.558752] (-) TimerEvent: {}
[21.659537] (-) TimerEvent: {}
[21.760304] (-) TimerEvent: {}
[21.861195] (-) TimerEvent: {}
[21.962067] (-) TimerEvent: {}
[22.062850] (-) TimerEvent: {}
[22.163739] (-) TimerEvent: {}
[22.264561] (-) TimerEvent: {}
[22.365437] (-) TimerEvent: {}
[22.466306] (-) TimerEvent: {}
[22.567090] (-) TimerEvent: {}
[22.667907] (-) TimerEvent: {}
[22.768775] (-) TimerEvent: {}
[22.869528] (-) TimerEvent: {}
[22.970335] (-) TimerEvent: {}
[23.071132] (-) TimerEvent: {}
[23.171930] (-) TimerEvent: {}
[23.272886] (-) TimerEvent: {}
[23.373791] (-) TimerEvent: {}
[23.474561] (-) TimerEvent: {}
[23.575330] (-) TimerEvent: {}
[23.676094] (-) TimerEvent: {}
[23.776987] (-) TimerEvent: {}
[23.877779] (-) TimerEvent: {}
[23.978562] (-) TimerEvent: {}
[24.079541] (-) TimerEvent: {}
[24.180430] (-) TimerEvent: {}
[24.281231] (-) TimerEvent: {}
[24.382030] (-) TimerEvent: {}
[24.482893] (-) TimerEvent: {}
[24.583415] (boat_control_system) StdoutLine: {'line': b'[ 28%] \x1b[32m\x1b[1mLinking CXX static library libcoordinate_calculations_lib.a\x1b[0m\n'}
[24.584080] (-) TimerEvent: {}
[24.684791] (-) TimerEvent: {}
[24.738622] (boat_control_system) StdoutLine: {'line': b'[ 28%] Built target coordinate_calculations_lib\n'}
[24.785006] (-) TimerEvent: {}
[24.840558] (boat_control_system) StdoutLine: {'line': b'[ 42%] \x1b[32mBuilding CXX object CMakeFiles/coordinate_calculations_node.dir/src/coordinate_calculations_node.cpp.o\x1b[0m\n'}
[24.850884] (boat_control_system) StdoutLine: {'line': b'[ 57%] \x1b[32mBuilding CXX object CMakeFiles/waypoint_queue_node.dir/src/waypoint_queue_node.cpp.o\x1b[0m\n'}
[24.856062] (boat_control_system) StdoutLine: {'line': b'[ 71%] \x1b[32mBuilding CXX object CMakeFiles/waypoint_queue_node.dir/src/Waypoint_Queue.cpp.o\x1b[0m\n'}
[24.885225] (-) TimerEvent: {}
[24.986284] (-) TimerEvent: {}
[25.087891] (-) TimerEvent: {}
[25.189522] (-) TimerEvent: {}
[25.291180] (-) TimerEvent: {}
[25.392812] (-) TimerEvent: {}
[25.494593] (-) TimerEvent: {}
[25.596171] (-) TimerEvent: {}
[25.697890] (-) TimerEvent: {}
[25.799942] (-) TimerEvent: {}
[25.901794] (-) TimerEvent: {}
[26.003454] (-) TimerEvent: {}
[26.105194] (-) TimerEvent: {}
[26.208925] (-) TimerEvent: {}
[26.309727] (-) TimerEvent: {}
[26.410737] (-) TimerEvent: {}
[26.511795] (-) TimerEvent: {}
[26.612610] (-) TimerEvent: {}
[26.713421] (-) TimerEvent: {}
[26.818064] (-) TimerEvent: {}
[26.919028] (-) TimerEvent: {}
[27.019884] (-) TimerEvent: {}
[27.120906] (-) TimerEvent: {}
[27.222061] (-) TimerEvent: {}
[27.323048] (-) TimerEvent: {}
[27.424020] (-) TimerEvent: {}
[27.528298] (-) TimerEvent: {}
[27.629424] (-) TimerEvent: {}
[27.730513] (-) TimerEvent: {}
[27.831542] (-) TimerEvent: {}
[27.932612] (-) TimerEvent: {}
[28.033812] (-) TimerEvent: {}
[28.136787] (-) TimerEvent: {}
[28.239876] (-) TimerEvent: {}
[28.342153] (-) TimerEvent: {}
[28.443169] (-) TimerEvent: {}
[28.546665] (-) TimerEvent: {}
[28.649579] (-) TimerEvent: {}
[28.751907] (-) TimerEvent: {}
[28.854425] (-) TimerEvent: {}
[28.957431] (-) TimerEvent: {}
[29.058943] (-) TimerEvent: {}
[29.159923] (-) TimerEvent: {}
[29.261149] (-) TimerEvent: {}
[29.363200] (-) TimerEvent: {}
[29.467083] (-) TimerEvent: {}
[29.568185] (-) TimerEvent: {}
[29.669161] (-) TimerEvent: {}
[29.770184] (-) TimerEvent: {}
[29.871393] (-) TimerEvent: {}
[29.972597] (-) TimerEvent: {}
[30.073791] (-) TimerEvent: {}
[30.174774] (-) TimerEvent: {}
[30.276012] (-) TimerEvent: {}
[30.376947] (-) TimerEvent: {}
[30.479427] (-) TimerEvent: {}
[30.581919] (-) TimerEvent: {}
[30.684905] (-) TimerEvent: {}
[30.789525] (-) TimerEvent: {}
[30.892961] (-) TimerEvent: {}
[30.995641] (-) TimerEvent: {}
[31.107348] (-) TimerEvent: {}
[31.221089] (-) TimerEvent: {}
[31.325654] (-) TimerEvent: {}
[31.435149] (-) TimerEvent: {}
[31.540511] (-) TimerEvent: {}
[31.642797] (-) TimerEvent: {}
[31.746412] (-) TimerEvent: {}
[31.856345] (-) TimerEvent: {}
[31.980701] (-) TimerEvent: {}
[32.081813] (-) TimerEvent: {}
[32.182838] (-) TimerEvent: {}
[32.283800] (-) TimerEvent: {}
[32.384921] (-) TimerEvent: {}
[32.486001] (-) TimerEvent: {}
[32.587047] (-) TimerEvent: {}
[32.688039] (-) TimerEvent: {}
[32.788983] (-) TimerEvent: {}
[32.889993] (-) TimerEvent: {}
[32.991107] (-) TimerEvent: {}
[33.092126] (-) TimerEvent: {}
[33.193209] (-) TimerEvent: {}
[33.294577] (-) TimerEvent: {}
[33.395496] (-) TimerEvent: {}
[33.497281] (-) TimerEvent: {}
[33.609437] (-) TimerEvent: {}
[33.712937] (-) TimerEvent: {}
[33.818386] (-) TimerEvent: {}
[33.928585] (-) TimerEvent: {}
[34.031114] (-) TimerEvent: {}
[34.134142] (-) TimerEvent: {}
[34.236640] (-) TimerEvent: {}
[34.339056] (-) TimerEvent: {}
[34.440155] (-) TimerEvent: {}
[34.541097] (-) TimerEvent: {}
[34.643617] (-) TimerEvent: {}
[34.746271] (-) TimerEvent: {}
[34.849447] (-) TimerEvent: {}
[34.951864] (-) TimerEvent: {}
[35.054184] (-) TimerEvent: {}
[35.155218] (-) TimerEvent: {}
[35.257250] (-) TimerEvent: {}
[35.358759] (-) TimerEvent: {}
[35.460637] (-) TimerEvent: {}
[35.566449] (-) TimerEvent: {}
[35.673553] (-) TimerEvent: {}
[35.775839] (-) TimerEvent: {}
[35.878405] (-) TimerEvent: {}
[35.980921] (-) TimerEvent: {}
[36.083246] (-) TimerEvent: {}
[36.184983] (-) TimerEvent: {}
[36.285972] (-) TimerEvent: {}
[36.389945] (-) TimerEvent: {}
[36.495186] (-) TimerEvent: {}
[36.604515] (-) TimerEvent: {}
[36.706910] (-) TimerEvent: {}
[36.812996] (-) TimerEvent: {}
[36.913926] (-) TimerEvent: {}
[37.016325] (-) TimerEvent: {}
[37.117498] (-) TimerEvent: {}
[37.218757] (-) TimerEvent: {}
[37.321772] (-) TimerEvent: {}
[37.423501] (-) TimerEvent: {}
[37.530428] (-) TimerEvent: {}
[37.631397] (-) TimerEvent: {}
[37.732486] (-) TimerEvent: {}
[37.833600] (-) TimerEvent: {}
[37.936391] (-) TimerEvent: {}
[38.039143] (-) TimerEvent: {}
[38.141833] (-) TimerEvent: {}
[38.242811] (-) TimerEvent: {}
[38.343739] (-) TimerEvent: {}
[38.444844] (-) TimerEvent: {}
[38.549467] (-) TimerEvent: {}
[38.656977] (-) TimerEvent: {}
[38.763175] (-) TimerEvent: {}
[38.866200] (-) TimerEvent: {}
[38.977654] (-) TimerEvent: {}
[39.078707] (-) TimerEvent: {}
[39.179864] (-) TimerEvent: {}
[39.281008] (-) TimerEvent: {}
[39.382088] (-) TimerEvent: {}
[39.484716] (-) TimerEvent: {}
[39.593339] (-) TimerEvent: {}
[39.697298] (-) TimerEvent: {}
[39.804685] (-) TimerEvent: {}
[39.907773] (-) TimerEvent: {}
[40.010229] (-) TimerEvent: {}
[40.112939] (-) TimerEvent: {}
[40.215073] (-) TimerEvent: {}
[40.316142] (-) TimerEvent: {}
[40.417331] (-) TimerEvent: {}
[40.518864] (-) TimerEvent: {}
[40.625325] (-) TimerEvent: {}
[40.734450] (-) TimerEvent: {}
[40.840444] (-) TimerEvent: {}
[40.943365] (-) TimerEvent: {}
[41.046327] (-) TimerEvent: {}
[41.155320] (-) TimerEvent: {}
[41.256521] (-) TimerEvent: {}
[41.357706] (-) TimerEvent: {}
[41.458841] (-) TimerEvent: {}
[41.559854] (-) TimerEvent: {}
[41.662469] (-) TimerEvent: {}
[41.766636] (-) TimerEvent: {}
[41.867780] (-) TimerEvent: {}
[41.969096] (-) TimerEvent: {}
[42.077069] (-) TimerEvent: {}
[42.180698] (-) TimerEvent: {}
[42.283213] (-) TimerEvent: {}
[42.384276] (-) TimerEvent: {}
[42.484045] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/Control/boat_control_system/src/Waypoint_Queue.cpp:\x1b[m\x1b[K In function \xe2\x80\x98\x1b[01m\x1b[Kvoid turn_boat(float, bool)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[42.487105] (-) TimerEvent: {}
[42.487801] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/Control/boat_control_system/src/Waypoint_Queue.cpp:49:112:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kmissing initializer for member \xe2\x80\x98\x1b[01m\x1b[KDatatypes::Coordinate::longitude\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wmissing-field-initializers\x07-Wmissing-field-initializers\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[42.489217] (boat_control_system) StderrLine: {'line': b'   49 |         auto [turn_direction, turn_angle] = \x1b[01;35m\x1b[KCoordinateCalculations::getInstance().calculate_directional_bearing({desired_angle_heading})\x1b[m\x1b[K;\n'}
[42.490046] (boat_control_system) StderrLine: {'line': b'      |                                             \x1b[01;35m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[42.514531] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/Control/boat_control_system/src/Waypoint_Queue.cpp:45:50:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kunused parameter \xe2\x80\x98\x1b[01m\x1b[Kspeed_needed\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter\x07-Wunused-parameter\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[42.516083] (boat_control_system) StderrLine: {'line': b'   45 | void turn_boat(float desired_angle_heading, \x1b[01;35m\x1b[Kbool speed_needed\x1b[m\x1b[K)\n'}
[42.517528] (boat_control_system) StderrLine: {'line': b'      |                                             \x1b[01;35m\x1b[K~~~~~^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[42.520800] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/Control/boat_control_system/src/Waypoint_Queue.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid WaypointQueue::execute_waypoints(Datatypes::Coordinate)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[42.522196] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/Control/boat_control_system/src/Waypoint_Queue.cpp:85:19:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kunused variable \xe2\x80\x98\x1b[01m\x1b[Kbearing_to_waypoint\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-variable\x07-Wunused-variable\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[42.523551] (boat_control_system) StderrLine: {'line': b'   85 |             float \x1b[01;35m\x1b[Kbearing_to_waypoint\x1b[m\x1b[K = CoordinateCalculations::getInstance().calculate_bearing(current_position, next_waypoint);\n'}
[42.524784] (boat_control_system) StderrLine: {'line': b'      |                   \x1b[01;35m\x1b[K^~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[42.587323] (-) TimerEvent: {}
[42.700591] (-) TimerEvent: {}
[42.806749] (-) TimerEvent: {}
[42.907858] (-) TimerEvent: {}
[43.008958] (-) TimerEvent: {}
[43.110018] (-) TimerEvent: {}
[43.211028] (-) TimerEvent: {}
[43.320997] (-) TimerEvent: {}
[43.423661] (-) TimerEvent: {}
[43.525895] (-) TimerEvent: {}
[43.628444] (-) TimerEvent: {}
[43.732993] (-) TimerEvent: {}
[43.838266] (-) TimerEvent: {}
[43.954603] (-) TimerEvent: {}
[44.056942] (-) TimerEvent: {}
[44.157813] (-) TimerEvent: {}
[44.258686] (-) TimerEvent: {}
[44.359645] (-) TimerEvent: {}
[44.460608] (-) TimerEvent: {}
[44.569020] (-) TimerEvent: {}
[44.670193] (-) TimerEvent: {}
[44.771234] (-) TimerEvent: {}
[44.872164] (-) TimerEvent: {}
[44.973208] (-) TimerEvent: {}
[45.076976] (-) TimerEvent: {}
[45.114191] (boat_control_system) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[45.114864] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[45.115289] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[45.115688] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[45.116252] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[45.116854] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[45.117434] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[45.117963] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[45.118519] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[45.118928] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[45.119309] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/boat/Desktop/src/Control/boat_control_system/include/coordinate_calculations_node.hpp:9\x1b[m\x1b[K,\n'}
[45.119691] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/boat/Desktop/src/Control/boat_control_system/src/coordinate_calculations_node.cpp:1\x1b[m\x1b[K:\n'}
[45.120087] (boat_control_system) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[45.120571] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Point_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::Point_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.129549] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Point_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::Point_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.130750] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Point_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.131485] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Point_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.132520] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/Control/boat_control_system/src/coordinate_calculations_node.cpp:16:82:\x1b[m\x1b[K   required from here\n'}
[45.133705] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void>, false>::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&)>, std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<geometry_msgs::msg::Point_<std::allocator<void> >, std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[45.134912] (boat_control_system) StderrLine: {'line': b'  394 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[45.135677] (boat_control_system) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[45.136563] (boat_control_system) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[45.137336] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[45.138160] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[45.138944] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[45.139750] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[45.140524] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[45.141173] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[45.141875] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[45.142558] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[45.143363] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[45.144181] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/boat/Desktop/src/Control/boat_control_system/include/coordinate_calculations_node.hpp:9\x1b[m\x1b[K,\n'}
[45.145023] (boat_control_system) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/boat/Desktop/src/Control/boat_control_system/src/coordinate_calculations_node.cpp:1\x1b[m\x1b[K:\n'}
[45.145798] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&)>, std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.146872] (boat_control_system) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[45.147617] (boat_control_system) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[45.148365] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[45.149105] (boat_control_system) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&)>, std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[45.150227] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&)>, std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&)>, std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&)>, std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&)>, std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&)>, std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.151750] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.152614] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Point_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::Point_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.153644] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Point_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::Point_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.154600] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Point_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.155557] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Point_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.156472] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/Control/boat_control_system/src/coordinate_calculations_node.cpp:16:82:\x1b[m\x1b[K   required from here\n'}
[45.157366] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.158188] (boat_control_system) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[45.158930] (boat_control_system) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[45.159668] (boat_control_system) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[45.160523] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Point_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::Point_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.161358] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Point_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::Point_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.162294] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Point_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.163278] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Point_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Point_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Point_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.164215] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/Control/boat_control_system/src/coordinate_calculations_node.cpp:16:82:\x1b[m\x1b[K   required from here\n'}
[45.165037] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&)>, std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.165991] (boat_control_system) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[45.166882] (boat_control_system) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[45.167656] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<geometry_msgs::msg::Point_<std::allocator<void> >, std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&)>, std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.168613] (boat_control_system) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[45.169323] (boat_control_system) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[45.169939] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&)>, std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.170990] (boat_control_system) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[45.171657] (boat_control_system) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[45.172254] (boat_control_system) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<geometry_msgs::msg::Point_<std::allocator<void> >, std::_Bind<void (CoordinateCalculationsNode::*(CoordinateCalculationsNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&)>, std::function<void(const geometry_msgs::msg::Point_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<geometry_msgs::msg::Point_<std::allocator<void> >, std::default_delete<geometry_msgs::msg::Point_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const geometry_msgs::msg::Point_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<geometry_msgs::msg::Point_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[45.173368] (boat_control_system) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[45.174140] (boat_control_system) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[45.177145] (-) TimerEvent: {}
[45.283737] (-) TimerEvent: {}
[45.387380] (-) TimerEvent: {}
[45.489563] (-) TimerEvent: {}
[45.591457] (-) TimerEvent: {}
[45.695641] (-) TimerEvent: {}
[45.798359] (-) TimerEvent: {}
[45.901344] (-) TimerEvent: {}
[46.005533] (-) TimerEvent: {}
[46.109313] (-) TimerEvent: {}
[46.213180] (-) TimerEvent: {}
[46.314524] (-) TimerEvent: {}
[46.415466] (-) TimerEvent: {}
[46.516455] (-) TimerEvent: {}
[46.617416] (-) TimerEvent: {}
[46.729267] (-) TimerEvent: {}
[46.831834] (-) TimerEvent: {}
[46.933625] (-) TimerEvent: {}
[47.034566] (-) TimerEvent: {}
[47.135625] (-) TimerEvent: {}
[47.236679] (-) TimerEvent: {}
[47.338881] (-) TimerEvent: {}
[47.441961] (-) TimerEvent: {}
[47.543808] (-) TimerEvent: {}
[47.644920] (-) TimerEvent: {}
[47.746670] (-) TimerEvent: {}
[47.849461] (-) TimerEvent: {}
[47.950435] (-) TimerEvent: {}
[48.051277] (-) TimerEvent: {}
[48.152155] (-) TimerEvent: {}
[48.253132] (-) TimerEvent: {}
[48.354071] (-) TimerEvent: {}
[48.455004] (-) TimerEvent: {}
[48.555836] (-) TimerEvent: {}
[48.656684] (-) TimerEvent: {}
[48.757606] (-) TimerEvent: {}
[48.858538] (-) TimerEvent: {}
[48.959436] (-) TimerEvent: {}
[49.060332] (-) TimerEvent: {}
[49.161278] (-) TimerEvent: {}
[49.262286] (-) TimerEvent: {}
[49.363422] (-) TimerEvent: {}
[49.464512] (-) TimerEvent: {}
[49.565472] (-) TimerEvent: {}
[49.666359] (-) TimerEvent: {}
[49.767305] (-) TimerEvent: {}
[49.868238] (-) TimerEvent: {}
[49.971298] (-) TimerEvent: {}
[50.072247] (-) TimerEvent: {}
[50.173224] (-) TimerEvent: {}
[50.274200] (-) TimerEvent: {}
[50.375226] (-) TimerEvent: {}
[50.476300] (-) TimerEvent: {}
[50.577357] (-) TimerEvent: {}
[50.678240] (-) TimerEvent: {}
[50.779188] (-) TimerEvent: {}
[50.880052] (-) TimerEvent: {}
[50.980922] (-) TimerEvent: {}
[51.081786] (-) TimerEvent: {}
[51.182640] (-) TimerEvent: {}
[51.283661] (-) TimerEvent: {}
[51.384690] (-) TimerEvent: {}
[51.486692] (-) TimerEvent: {}
[51.587561] (-) TimerEvent: {}
[51.688414] (-) TimerEvent: {}
[51.789340] (-) TimerEvent: {}
[51.890394] (-) TimerEvent: {}
[51.991477] (-) TimerEvent: {}
[52.092388] (-) TimerEvent: {}
[52.193343] (-) TimerEvent: {}
[52.294239] (-) TimerEvent: {}
[52.401382] (-) TimerEvent: {}
[52.502332] (-) TimerEvent: {}
[52.603259] (-) TimerEvent: {}
[52.704209] (-) TimerEvent: {}
[52.805123] (-) TimerEvent: {}
[52.906119] (-) TimerEvent: {}
[53.007129] (-) TimerEvent: {}
[53.109092] (-) TimerEvent: {}
[53.210029] (-) TimerEvent: {}
[53.310881] (-) TimerEvent: {}
[53.411773] (-) TimerEvent: {}
[53.512636] (-) TimerEvent: {}
[53.613713] (-) TimerEvent: {}
[53.714651] (-) TimerEvent: {}
[53.815554] (-) TimerEvent: {}
[53.916426] (-) TimerEvent: {}
[54.018183] (-) TimerEvent: {}
[54.119034] (-) TimerEvent: {}
[54.219894] (-) TimerEvent: {}
[54.320860] (-) TimerEvent: {}
[54.421740] (-) TimerEvent: {}
[54.522577] (-) TimerEvent: {}
[54.623418] (-) TimerEvent: {}
[54.724280] (-) TimerEvent: {}
[54.825940] (-) TimerEvent: {}
[54.928501] (-) TimerEvent: {}
[55.029424] (-) TimerEvent: {}
[55.130300] (-) TimerEvent: {}
[55.231185] (-) TimerEvent: {}
[55.332116] (-) TimerEvent: {}
[55.433046] (-) TimerEvent: {}
[55.533948] (-) TimerEvent: {}
[55.634800] (-) TimerEvent: {}
[55.735672] (-) TimerEvent: {}
[55.836521] (-) TimerEvent: {}
[55.937473] (-) TimerEvent: {}
[56.038366] (-) TimerEvent: {}
[56.139203] (-) TimerEvent: {}
[56.242168] (-) TimerEvent: {}
[56.343018] (-) TimerEvent: {}
[56.443880] (-) TimerEvent: {}
[56.544828] (-) TimerEvent: {}
[56.645667] (-) TimerEvent: {}
[56.746538] (-) TimerEvent: {}
[56.847377] (-) TimerEvent: {}
[56.948285] (-) TimerEvent: {}
[57.049190] (-) TimerEvent: {}
[57.150039] (-) TimerEvent: {}
[57.250886] (-) TimerEvent: {}
[57.351776] (-) TimerEvent: {}
[57.452637] (-) TimerEvent: {}
[57.561012] (-) TimerEvent: {}
[57.661983] (-) TimerEvent: {}
[57.762940] (-) TimerEvent: {}
[57.863877] (-) TimerEvent: {}
[57.964896] (-) TimerEvent: {}
[58.065903] (-) TimerEvent: {}
[58.166928] (-) TimerEvent: {}
[58.272112] (-) TimerEvent: {}
[58.373032] (-) TimerEvent: {}
[58.473941] (-) TimerEvent: {}
[58.577119] (-) TimerEvent: {}
[58.680653] (-) TimerEvent: {}
[58.781684] (-) TimerEvent: {}
[58.882594] (-) TimerEvent: {}
[58.983454] (-) TimerEvent: {}
[59.089014] (-) TimerEvent: {}
[59.189941] (-) TimerEvent: {}
[59.290833] (-) TimerEvent: {}
[59.391800] (-) TimerEvent: {}
[59.500885] (-) TimerEvent: {}
[59.601812] (-) TimerEvent: {}
[59.705167] (-) TimerEvent: {}
[59.807303] (-) TimerEvent: {}
[59.908074] (-) TimerEvent: {}
[60.008906] (-) TimerEvent: {}
[60.109669] (-) TimerEvent: {}
[60.210378] (-) TimerEvent: {}
[60.311113] (-) TimerEvent: {}
[60.411860] (-) TimerEvent: {}
[60.512603] (-) TimerEvent: {}
[60.613431] (-) TimerEvent: {}
[60.714213] (-) TimerEvent: {}
[60.817317] (-) TimerEvent: {}
[60.919591] (-) TimerEvent: {}
[61.021061] (-) TimerEvent: {}
[61.122313] (-) TimerEvent: {}
[61.225191] (-) TimerEvent: {}
[61.330350] (-) TimerEvent: {}
[61.431812] (-) TimerEvent: {}
[61.533902] (-) TimerEvent: {}
[61.634967] (-) TimerEvent: {}
[61.735840] (-) TimerEvent: {}
[61.836832] (-) TimerEvent: {}
[61.937761] (-) TimerEvent: {}
[62.038897] (-) TimerEvent: {}
[62.139803] (-) TimerEvent: {}
[62.243060] (-) TimerEvent: {}
[62.343952] (-) TimerEvent: {}
[62.445218] (-) TimerEvent: {}
[62.524982] (boat_control_system) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/coordinate_calculations_node.dir/build.make:76: CMakeFiles/coordinate_calculations_node.dir/src/coordinate_calculations_node.cpp.o] Error 1\n'}
[62.533031] (boat_control_system) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:167: CMakeFiles/coordinate_calculations_node.dir/all] Error 2\n'}
[62.536981] (boat_control_system) StderrLine: {'line': b'gmake[1]: *** Waiting for unfinished jobs....\n'}
[62.546249] (-) TimerEvent: {}
[62.649949] (-) TimerEvent: {}
[62.751056] (-) TimerEvent: {}
[62.852053] (-) TimerEvent: {}
[62.952906] (-) TimerEvent: {}
[63.053819] (-) TimerEvent: {}
[63.154523] (-) TimerEvent: {}
[63.255350] (-) TimerEvent: {}
[63.356294] (-) TimerEvent: {}
[63.457277] (-) TimerEvent: {}
[63.558055] (-) TimerEvent: {}
[63.658888] (-) TimerEvent: {}
[63.760418] (-) TimerEvent: {}
[63.861343] (-) TimerEvent: {}
[63.962183] (-) TimerEvent: {}
[64.062959] (-) TimerEvent: {}
[64.163729] (-) TimerEvent: {}
[64.264648] (-) TimerEvent: {}
[64.365469] (-) TimerEvent: {}
[64.466215] (-) TimerEvent: {}
[64.567037] (-) TimerEvent: {}
[64.667804] (-) TimerEvent: {}
[64.768584] (-) TimerEvent: {}
[64.869472] (-) TimerEvent: {}
[64.970273] (-) TimerEvent: {}
[65.071115] (-) TimerEvent: {}
[65.171969] (-) TimerEvent: {}
[65.272825] (-) TimerEvent: {}
[65.373649] (-) TimerEvent: {}
[65.474464] (-) TimerEvent: {}
[65.575310] (-) TimerEvent: {}
[65.676099] (-) TimerEvent: {}
[65.776947] (-) TimerEvent: {}
[65.877894] (-) TimerEvent: {}
[65.978670] (-) TimerEvent: {}
[66.079420] (-) TimerEvent: {}
[66.180371] (-) TimerEvent: {}
[66.281855] (-) TimerEvent: {}
[66.383074] (-) TimerEvent: {}
[66.484060] (-) TimerEvent: {}
[66.585130] (-) TimerEvent: {}
[66.686632] (-) TimerEvent: {}
[66.787568] (-) TimerEvent: {}
[66.888470] (-) TimerEvent: {}
[66.989436] (-) TimerEvent: {}
[67.090302] (-) TimerEvent: {}
[67.191184] (-) TimerEvent: {}
[67.292004] (-) TimerEvent: {}
[67.392931] (-) TimerEvent: {}
[67.493749] (-) TimerEvent: {}
[67.594485] (-) TimerEvent: {}
[67.695203] (-) TimerEvent: {}
[67.795966] (-) TimerEvent: {}
[67.896806] (-) TimerEvent: {}
[67.997531] (-) TimerEvent: {}
[68.098559] (-) TimerEvent: {}
[68.199367] (-) TimerEvent: {}
[68.300144] (-) TimerEvent: {}
[68.400994] (-) TimerEvent: {}
[68.501787] (-) TimerEvent: {}
[68.602538] (-) TimerEvent: {}
[68.703289] (-) TimerEvent: {}
[68.804068] (-) TimerEvent: {}
[68.904865] (-) TimerEvent: {}
[69.005594] (-) TimerEvent: {}
[69.106365] (-) TimerEvent: {}
[69.207108] (-) TimerEvent: {}
[69.307873] (-) TimerEvent: {}
[69.408635] (-) TimerEvent: {}
[69.509640] (-) TimerEvent: {}
[69.610397] (-) TimerEvent: {}
[69.711141] (-) TimerEvent: {}
[69.811906] (-) TimerEvent: {}
[69.912706] (-) TimerEvent: {}
[70.013546] (-) TimerEvent: {}
[70.114291] (-) TimerEvent: {}
[70.215054] (-) TimerEvent: {}
[70.315803] (-) TimerEvent: {}
[70.416582] (-) TimerEvent: {}
[70.517438] (-) TimerEvent: {}
[70.618182] (-) TimerEvent: {}
[70.718970] (-) TimerEvent: {}
[70.819711] (-) TimerEvent: {}
[70.920467] (-) TimerEvent: {}
[71.021303] (-) TimerEvent: {}
[71.122055] (-) TimerEvent: {}
[71.222782] (-) TimerEvent: {}
[71.323590] (-) TimerEvent: {}
[71.424352] (-) TimerEvent: {}
[71.525248] (-) TimerEvent: {}
[71.625962] (-) TimerEvent: {}
[71.726724] (-) TimerEvent: {}
[71.827476] (-) TimerEvent: {}
[71.928260] (-) TimerEvent: {}
[72.029034] (-) TimerEvent: {}
[72.129733] (-) TimerEvent: {}
[72.230492] (-) TimerEvent: {}
[72.331211] (-) TimerEvent: {}
[72.432046] (-) TimerEvent: {}
[72.532861] (-) TimerEvent: {}
[72.633617] (-) TimerEvent: {}
[72.734489] (-) TimerEvent: {}
[72.835215] (-) TimerEvent: {}
[72.935977] (-) TimerEvent: {}
[73.036770] (-) TimerEvent: {}
[73.137576] (-) TimerEvent: {}
[73.238354] (-) TimerEvent: {}
[73.339132] (-) TimerEvent: {}
[73.440018] (-) TimerEvent: {}
[73.540848] (-) TimerEvent: {}
[73.641633] (-) TimerEvent: {}
[73.742470] (-) TimerEvent: {}
[73.843285] (-) TimerEvent: {}
[73.944044] (-) TimerEvent: {}
[74.044827] (-) TimerEvent: {}
[74.145610] (-) TimerEvent: {}
[74.246379] (-) TimerEvent: {}
[74.347108] (-) TimerEvent: {}
[74.447910] (-) TimerEvent: {}
[74.548765] (-) TimerEvent: {}
[74.649551] (-) TimerEvent: {}
[74.750271] (-) TimerEvent: {}
[74.851017] (-) TimerEvent: {}
[74.951743] (-) TimerEvent: {}
[75.052523] (-) TimerEvent: {}
[75.153321] (-) TimerEvent: {}
[75.254116] (-) TimerEvent: {}
[75.354856] (-) TimerEvent: {}
[75.455612] (-) TimerEvent: {}
[75.556344] (-) TimerEvent: {}
[75.657204] (-) TimerEvent: {}
[75.757998] (-) TimerEvent: {}
[75.858733] (-) TimerEvent: {}
[75.959447] (-) TimerEvent: {}
[76.060178] (-) TimerEvent: {}
[76.160927] (-) TimerEvent: {}
[76.261772] (-) TimerEvent: {}
[76.362630] (-) TimerEvent: {}
[76.463362] (-) TimerEvent: {}
[76.564118] (-) TimerEvent: {}
[76.664879] (-) TimerEvent: {}
[76.765548] (-) TimerEvent: {}
[76.866298] (-) TimerEvent: {}
[76.967030] (-) TimerEvent: {}
[77.067814] (-) TimerEvent: {}
[77.168591] (-) TimerEvent: {}
[77.269389] (-) TimerEvent: {}
[77.370173] (-) TimerEvent: {}
[77.470906] (-) TimerEvent: {}
[77.571656] (-) TimerEvent: {}
[77.672392] (-) TimerEvent: {}
[77.773152] (-) TimerEvent: {}
[77.873903] (-) TimerEvent: {}
[77.974726] (-) TimerEvent: {}
[78.075484] (-) TimerEvent: {}
[78.176246] (-) TimerEvent: {}
[78.277122] (-) TimerEvent: {}
[78.377948] (-) TimerEvent: {}
[78.478864] (-) TimerEvent: {}
[78.579599] (-) TimerEvent: {}
[78.680365] (-) TimerEvent: {}
[78.781170] (-) TimerEvent: {}
[78.881890] (-) TimerEvent: {}
[78.982709] (-) TimerEvent: {}
[79.083458] (-) TimerEvent: {}
[79.184230] (-) TimerEvent: {}
[79.284999] (-) TimerEvent: {}
[79.385734] (-) TimerEvent: {}
[79.486503] (-) TimerEvent: {}
[79.587252] (-) TimerEvent: {}
[79.687982] (-) TimerEvent: {}
[79.788811] (-) TimerEvent: {}
[79.889614] (-) TimerEvent: {}
[79.990403] (-) TimerEvent: {}
[80.091160] (-) TimerEvent: {}
[80.191932] (-) TimerEvent: {}
[80.292693] (-) TimerEvent: {}
[80.393548] (-) TimerEvent: {}
[80.494267] (-) TimerEvent: {}
[80.595007] (-) TimerEvent: {}
[80.695772] (-) TimerEvent: {}
[80.796508] (-) TimerEvent: {}
[80.897306] (-) TimerEvent: {}
[80.998060] (-) TimerEvent: {}
[81.098891] (-) TimerEvent: {}
[81.199633] (-) TimerEvent: {}
[81.300450] (-) TimerEvent: {}
[81.401278] (-) TimerEvent: {}
[81.502057] (-) TimerEvent: {}
[81.602879] (-) TimerEvent: {}
[81.703656] (-) TimerEvent: {}
[81.804419] (-) TimerEvent: {}
[81.905226] (-) TimerEvent: {}
[82.006008] (-) TimerEvent: {}
[82.106838] (-) TimerEvent: {}
[82.207594] (-) TimerEvent: {}
[82.308396] (-) TimerEvent: {}
[82.409193] (-) TimerEvent: {}
[82.509954] (-) TimerEvent: {}
[82.610687] (-) TimerEvent: {}
[82.711498] (-) TimerEvent: {}
[82.812253] (-) TimerEvent: {}
[82.913043] (-) TimerEvent: {}
[83.013790] (-) TimerEvent: {}
[83.114553] (-) TimerEvent: {}
[83.215358] (-) TimerEvent: {}
[83.316108] (-) TimerEvent: {}
[83.416904] (-) TimerEvent: {}
[83.517659] (-) TimerEvent: {}
[83.618410] (-) TimerEvent: {}
[83.719210] (-) TimerEvent: {}
[83.820048] (-) TimerEvent: {}
[83.920859] (-) TimerEvent: {}
[84.021603] (-) TimerEvent: {}
[84.122354] (-) TimerEvent: {}
[84.223188] (-) TimerEvent: {}
[84.323954] (-) TimerEvent: {}
[84.424710] (-) TimerEvent: {}
[84.525601] (-) TimerEvent: {}
[84.626387] (-) TimerEvent: {}
[84.727265] (-) TimerEvent: {}
[84.829021] (-) TimerEvent: {}
[84.929904] (-) TimerEvent: {}
[85.030739] (-) TimerEvent: {}
[85.131460] (-) TimerEvent: {}
[85.232245] (-) TimerEvent: {}
[85.333031] (-) TimerEvent: {}
[85.433776] (-) TimerEvent: {}
[85.534670] (-) TimerEvent: {}
[85.635437] (-) TimerEvent: {}
[85.736184] (-) TimerEvent: {}
[85.836948] (-) TimerEvent: {}
[85.937719] (-) TimerEvent: {}
[86.038503] (-) TimerEvent: {}
[86.139262] (-) TimerEvent: {}
[86.239985] (-) TimerEvent: {}
[86.340792] (-) TimerEvent: {}
[86.441508] (-) TimerEvent: {}
[86.542251] (-) TimerEvent: {}
[86.643058] (-) TimerEvent: {}
[86.743834] (-) TimerEvent: {}
[86.844579] (-) TimerEvent: {}
[86.945405] (-) TimerEvent: {}
[87.046174] (-) TimerEvent: {}
[87.146927] (-) TimerEvent: {}
[87.247686] (-) TimerEvent: {}
[87.348540] (-) TimerEvent: {}
[87.449431] (-) TimerEvent: {}
[87.550170] (-) TimerEvent: {}
[87.651004] (-) TimerEvent: {}
[87.751738] (-) TimerEvent: {}
[87.852531] (-) TimerEvent: {}
[87.953333] (-) TimerEvent: {}
[88.054103] (-) TimerEvent: {}
[88.154903] (-) TimerEvent: {}
[88.255695] (-) TimerEvent: {}
[88.356594] (-) TimerEvent: {}
[88.457491] (-) TimerEvent: {}
[88.558260] (-) TimerEvent: {}
[88.659065] (-) TimerEvent: {}
[88.759880] (-) TimerEvent: {}
[88.860795] (-) TimerEvent: {}
[88.961651] (-) TimerEvent: {}
[89.062544] (-) TimerEvent: {}
[89.163394] (-) TimerEvent: {}
[89.264290] (-) TimerEvent: {}
[89.365312] (-) TimerEvent: {}
[89.497920] (-) TimerEvent: {}
[89.599015] (-) TimerEvent: {}
[89.700284] (-) TimerEvent: {}
[89.801282] (-) TimerEvent: {}
[89.902151] (-) TimerEvent: {}
[90.003307] (-) TimerEvent: {}
[90.104270] (-) TimerEvent: {}
[90.205115] (-) TimerEvent: {}
[90.305924] (-) TimerEvent: {}
[90.406680] (-) TimerEvent: {}
[90.507457] (-) TimerEvent: {}
[90.608193] (-) TimerEvent: {}
[90.708912] (-) TimerEvent: {}
[90.809667] (-) TimerEvent: {}
[90.910390] (-) TimerEvent: {}
[91.011141] (-) TimerEvent: {}
[91.111881] (-) TimerEvent: {}
[91.212615] (-) TimerEvent: {}
[91.313467] (-) TimerEvent: {}
[91.414269] (-) TimerEvent: {}
[91.515107] (-) TimerEvent: {}
[91.615853] (-) TimerEvent: {}
[91.716632] (-) TimerEvent: {}
[91.817506] (-) TimerEvent: {}
[91.918218] (-) TimerEvent: {}
[92.018948] (-) TimerEvent: {}
[92.119699] (-) TimerEvent: {}
[92.220452] (-) TimerEvent: {}
[92.321244] (-) TimerEvent: {}
[92.422022] (-) TimerEvent: {}
[92.522748] (-) TimerEvent: {}
[92.623454] (-) TimerEvent: {}
[92.724204] (-) TimerEvent: {}
[92.824949] (-) TimerEvent: {}
[92.925626] (-) TimerEvent: {}
[93.026523] (-) TimerEvent: {}
[93.127257] (-) TimerEvent: {}
[93.227963] (-) TimerEvent: {}
[93.328692] (-) TimerEvent: {}
[93.429436] (-) TimerEvent: {}
[93.530195] (-) TimerEvent: {}
[93.630918] (-) TimerEvent: {}
[93.731761] (-) TimerEvent: {}
[93.832543] (-) TimerEvent: {}
[93.933343] (-) TimerEvent: {}
[94.034110] (-) TimerEvent: {}
[94.134809] (-) TimerEvent: {}
[94.235538] (-) TimerEvent: {}
[94.336379] (-) TimerEvent: {}
[94.437478] (-) TimerEvent: {}
[94.539307] (-) TimerEvent: {}
[94.640721] (-) TimerEvent: {}
[94.741691] (-) TimerEvent: {}
[94.842450] (-) TimerEvent: {}
[94.943300] (-) TimerEvent: {}
[95.044523] (-) TimerEvent: {}
[95.145521] (-) TimerEvent: {}
[95.246421] (-) TimerEvent: {}
[95.347342] (-) TimerEvent: {}
[95.448149] (-) TimerEvent: {}
[95.549155] (-) TimerEvent: {}
[95.649886] (-) TimerEvent: {}
[95.750701] (-) TimerEvent: {}
[95.851481] (-) TimerEvent: {}
[95.952299] (-) TimerEvent: {}
[96.053247] (-) TimerEvent: {}
[96.154183] (-) TimerEvent: {}
[96.249057] (boat_control_system) StdoutLine: {'line': b'[ 85%] \x1b[32m\x1b[1mLinking CXX executable waypoint_queue_node\x1b[0m\n'}
[96.256223] (-) TimerEvent: {}
[96.356919] (-) TimerEvent: {}
[96.457639] (-) TimerEvent: {}
[96.558486] (-) TimerEvent: {}
[96.659431] (-) TimerEvent: {}
[96.760310] (-) TimerEvent: {}
[96.861378] (-) TimerEvent: {}
[96.962379] (-) TimerEvent: {}
[97.063481] (-) TimerEvent: {}
[97.164806] (-) TimerEvent: {}
[97.266056] (-) TimerEvent: {}
[97.367106] (-) TimerEvent: {}
[97.468306] (-) TimerEvent: {}
[97.569326] (-) TimerEvent: {}
[97.670392] (-) TimerEvent: {}
[97.771484] (-) TimerEvent: {}
[97.872826] (-) TimerEvent: {}
[97.973724] (-) TimerEvent: {}
[98.074728] (-) TimerEvent: {}
[98.175646] (-) TimerEvent: {}
[98.276504] (-) TimerEvent: {}
[98.377439] (-) TimerEvent: {}
[98.478178] (-) TimerEvent: {}
[98.578853] (-) TimerEvent: {}
[98.679538] (-) TimerEvent: {}
[98.780245] (-) TimerEvent: {}
[98.880964] (-) TimerEvent: {}
[98.981628] (-) TimerEvent: {}
[99.082460] (-) TimerEvent: {}
[99.183755] (-) TimerEvent: {}
[99.284474] (-) TimerEvent: {}
[99.385412] (-) TimerEvent: {}
[99.486692] (-) TimerEvent: {}
[99.587528] (-) TimerEvent: {}
[99.689537] (-) TimerEvent: {}
[99.790248] (-) TimerEvent: {}
[99.890981] (-) TimerEvent: {}
[99.937282] (boat_control_system) StderrLine: {'line': b"/usr/bin/ld: CMakeFiles/waypoint_queue_node.dir/src/Waypoint_Queue.cpp.o: in function `turn_boat(float, bool)':\n"}
[99.938137] (boat_control_system) StderrLine: {'line': b"Waypoint_Queue.cpp:(.text+0x218): undefined reference to `CoordinateCalculations::calculate_directional_bearing[abi:cxx11](Datatypes::Coordinate)'\n"}
[99.938555] (boat_control_system) StderrLine: {'line': b"/usr/bin/ld: CMakeFiles/waypoint_queue_node.dir/src/Waypoint_Queue.cpp.o: in function `WaypointQueue::getInstance()':\n"}
[99.938918] (boat_control_system) StderrLine: {'line': b"Waypoint_Queue.cpp:(.text+0x4b0): undefined reference to `WaypointQueue::WaypointQueue()'\n"}
[99.939991] (boat_control_system) StderrLine: {'line': b"/usr/bin/ld: libcoordinate_calculations_lib.a(Coordinate_Calculations.cpp.o): in function `CoordinateCalculations::plan_path(Datatypes::Coordinate const&, Datatypes::Coordinate const&)':\n"}
[99.941032] (boat_control_system) StderrLine: {'line': b"Coordinate_Calculations.cpp:(.text+0xad8): undefined reference to `CoordinateCalculations::convert_to_position(Datatypes::Coordinate, float, float)'\n"}
[99.941525] (boat_control_system) StderrLine: {'line': b"/usr/bin/ld: Coordinate_Calculations.cpp:(.text+0xb0c): undefined reference to `CoordinateCalculations::convert_to_position(Datatypes::Coordinate, float, float)'\n"}
[99.941872] (boat_control_system) StderrLine: {'line': b"/usr/bin/ld: libcoordinate_calculations_lib.a(Coordinate_Calculations.cpp.o): in function `CoordinateCalculations::getInstance()':\n"}
[99.942199] (boat_control_system) StderrLine: {'line': b"Coordinate_Calculations.cpp:(.text+0xe64): undefined reference to `CoordinateCalculations::CoordinateCalculations()'\n"}
[99.991231] (-) TimerEvent: {}
[100.092022] (-) TimerEvent: {}
[100.135097] (boat_control_system) StderrLine: {'line': b'collect2: error: ld returned 1 exit status\n'}
[100.141492] (boat_control_system) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/waypoint_queue_node.dir/build.make:192: waypoint_queue_node] Error 1\n'}
[100.142384] (boat_control_system) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:193: CMakeFiles/waypoint_queue_node.dir/all] Error 2\n'}
[100.145670] (boat_control_system) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[100.178973] (boat_control_system) CommandEnded: {'returncode': 2}
[100.192660] (-) TimerEvent: {}
[100.303479] (-) TimerEvent: {}
[100.404176] (-) TimerEvent: {}
[100.510134] (-) TimerEvent: {}
[100.556009] (boat_control_system) JobEnded: {'identifier': 'boat_control_system', 'rc': 2}
[100.569629] (-) EventReactorShutdown: {}
