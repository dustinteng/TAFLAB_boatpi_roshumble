[0.000000] (-) TimerEvent: {}
[0.001789] (boat_control_system_final) JobQueued: {'identifier': 'boat_control_system_final', 'dependencies': OrderedDict()}
[0.002460] (boat_control_system_final) JobStarted: {'identifier': 'boat_control_system_final'}
[0.049830] (boat_control_system_final) JobProgress: {'identifier': 'boat_control_system_final', 'progress': 'cmake'}
[0.053790] (boat_control_system_final) JobProgress: {'identifier': 'boat_control_system_final', 'progress': 'build'}
[0.058194] (boat_control_system_final) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/boat/Desktop/src/boat_control_system_final/build/boat_control_system_final', '--', '-j4', '-l4'], 'cwd': '/home/boat/Desktop/src/boat_control_system_final/build/boat_control_system_final', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'boat'), ('SSH_CLIENT', '10.136.128.231 56713 22'), ('XDG_SESSION_TYPE', 'tty'), ('GIT_ASKPASS', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/extensions/git/dist/askpass.sh'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/aarch64-linux-gnu:/opt/ros/humble/lib'), ('BROWSER', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/bin/helpers/browser.sh'), ('MOTD_SHOWN', 'pam'), ('HOME', '/home/boat'), ('TERM_PROGRAM_VERSION', '1.95.2'), ('VSCODE_IPC_HOOK_CLI', '/run/user/1000/vscode-ipc-e1156e86-b755-4fab-9937-a89aa8c9bb16.sock'), ('ROS_PYTHON_VERSION', '3'), ('VSCODE_GIT_ASKPASS_MAIN', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/extensions/git/dist/askpass-main.js'), ('VSCODE_GIT_ASKPASS_NODE', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/node'), ('SSL_CERT_FILE', '/usr/lib/ssl/certs/ca-certificates.crt'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'boat'), ('_', '/home/boat/.local/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('TERM', 'xterm-256color'), ('XDG_SESSION_ID', '5'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/home/boat/.vscode-server/cli/servers/Stable-e8653663e8840adaf45af01eab5c627a5af81807/server/bin/remote-cli:/home/boat/.local/bin:/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/boat/.local/bin:/home/boat/.local/bin:/home/boat/.local/bin:/home/boat/.local/bin'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('SSL_CERT_DIR', '/usr/lib/ssl/certs'), ('LANG', 'en_US.UTF-8'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('VSCODE_GIT_IPC_HANDLE', '/run/user/1000/vscode-git-15c79811d2.sock'), ('TERM_PROGRAM', 'vscode'), ('AMENT_PREFIX_PATH', '/opt/ros/humble'), ('SHELL', '/bin/bash'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('VSCODE_GIT_ASKPASS_EXTRA_ARGS', ''), ('PWD', '/home/boat/Desktop/src/boat_control_system_final/build/boat_control_system_final'), ('LC_ALL', 'en_US.UTF-8'), ('SSH_CONNECTION', '10.136.128.231 56713 10.41.221.43 22'), ('XDG_DATA_DIRS', '/usr/share/gnome:/usr/local/share:/usr/share:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('CMAKE_PREFIX_PATH', '/opt/ros/humble')]), 'shell': False}
[0.098923] (-) TimerEvent: {}
[0.199741] (-) TimerEvent: {}
[0.301278] (-) TimerEvent: {}
[0.346493] (boat_control_system_final) StdoutLine: {'line': b'[ 16%] Built target WaypointQueue\n'}
[0.355459] (boat_control_system_final) StdoutLine: {'line': b'[ 33%] Built target CoordinateCalculations\n'}
[0.401530] (-) TimerEvent: {}
[0.426989] (boat_control_system_final) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target RudderServoControlNode\x1b[0m\n'}
[0.487467] (boat_control_system_final) StdoutLine: {'line': b'[ 50%] Built target WaypointQueueNode\n'}
[0.499647] (boat_control_system_final) StdoutLine: {'line': b'[ 66%] Built target CoordinateCalculationsNodeLib\n'}
[0.502786] (-) TimerEvent: {}
[0.537897] (boat_control_system_final) StdoutLine: {'line': b'[ 75%] \x1b[32mBuilding CXX object CMakeFiles/RudderServoControlNode.dir/src/RudderServoControlNode.cpp.o\x1b[0m\n'}
[0.603044] (-) TimerEvent: {}
[0.629923] (boat_control_system_final) StdoutLine: {'line': b'[ 91%] Built target CoordinateCalculationsNodeExec\n'}
[0.703296] (-) TimerEvent: {}
[0.804054] (-) TimerEvent: {}
[0.904816] (-) TimerEvent: {}
[1.005984] (-) TimerEvent: {}
[1.107241] (-) TimerEvent: {}
[1.207989] (-) TimerEvent: {}
[1.308793] (-) TimerEvent: {}
[1.409618] (-) TimerEvent: {}
[1.510545] (-) TimerEvent: {}
[1.611347] (-) TimerEvent: {}
[1.712246] (-) TimerEvent: {}
[1.812999] (-) TimerEvent: {}
[1.913772] (-) TimerEvent: {}
[2.014498] (-) TimerEvent: {}
[2.115237] (-) TimerEvent: {}
[2.215976] (-) TimerEvent: {}
[2.316766] (-) TimerEvent: {}
[2.417817] (-) TimerEvent: {}
[2.518619] (-) TimerEvent: {}
[2.619467] (-) TimerEvent: {}
[2.720277] (-) TimerEvent: {}
[2.821154] (-) TimerEvent: {}
[2.922031] (-) TimerEvent: {}
[3.022842] (-) TimerEvent: {}
[3.123721] (-) TimerEvent: {}
[3.224595] (-) TimerEvent: {}
[3.325533] (-) TimerEvent: {}
[3.426591] (-) TimerEvent: {}
[3.527480] (-) TimerEvent: {}
[3.628402] (-) TimerEvent: {}
[3.729385] (-) TimerEvent: {}
[3.830559] (-) TimerEvent: {}
[3.931408] (-) TimerEvent: {}
[4.032308] (-) TimerEvent: {}
[4.133318] (-) TimerEvent: {}
[4.234262] (-) TimerEvent: {}
[4.335128] (-) TimerEvent: {}
[4.436135] (-) TimerEvent: {}
[4.536968] (-) TimerEvent: {}
[4.637817] (-) TimerEvent: {}
[4.738674] (-) TimerEvent: {}
[4.839668] (-) TimerEvent: {}
[4.940553] (-) TimerEvent: {}
[5.041409] (-) TimerEvent: {}
[5.142262] (-) TimerEvent: {}
[5.243185] (-) TimerEvent: {}
[5.344081] (-) TimerEvent: {}
[5.444899] (-) TimerEvent: {}
[5.545784] (-) TimerEvent: {}
[5.646637] (-) TimerEvent: {}
[5.747552] (-) TimerEvent: {}
[5.848400] (-) TimerEvent: {}
[5.949317] (-) TimerEvent: {}
[6.050188] (-) TimerEvent: {}
[6.151035] (-) TimerEvent: {}
[6.251832] (-) TimerEvent: {}
[6.352646] (-) TimerEvent: {}
[6.453561] (-) TimerEvent: {}
[6.554392] (-) TimerEvent: {}
[6.655193] (-) TimerEvent: {}
[6.755999] (-) TimerEvent: {}
[6.856853] (-) TimerEvent: {}
[6.957702] (-) TimerEvent: {}
[7.058576] (-) TimerEvent: {}
[7.159364] (-) TimerEvent: {}
[7.260160] (-) TimerEvent: {}
[7.361002] (-) TimerEvent: {}
[7.461995] (-) TimerEvent: {}
[7.562846] (-) TimerEvent: {}
[7.663641] (-) TimerEvent: {}
[7.764483] (-) TimerEvent: {}
[7.865333] (-) TimerEvent: {}
[7.966244] (-) TimerEvent: {}
[8.067067] (-) TimerEvent: {}
[8.167888] (-) TimerEvent: {}
[8.268735] (-) TimerEvent: {}
[8.369647] (-) TimerEvent: {}
[8.470539] (-) TimerEvent: {}
[8.571434] (-) TimerEvent: {}
[8.672252] (-) TimerEvent: {}
[8.773073] (-) TimerEvent: {}
[8.873945] (-) TimerEvent: {}
[8.974779] (-) TimerEvent: {}
[9.075632] (-) TimerEvent: {}
[9.176498] (-) TimerEvent: {}
[9.277371] (-) TimerEvent: {}
[9.378284] (-) TimerEvent: {}
[9.479090] (-) TimerEvent: {}
[9.579910] (-) TimerEvent: {}
[9.680774] (-) TimerEvent: {}
[9.781671] (-) TimerEvent: {}
[9.882509] (-) TimerEvent: {}
[9.983374] (-) TimerEvent: {}
[10.084175] (-) TimerEvent: {}
[10.184989] (-) TimerEvent: {}
[10.286155] (-) TimerEvent: {}
[10.387285] (-) TimerEvent: {}
[10.488158] (-) TimerEvent: {}
[10.589016] (-) TimerEvent: {}
[10.689858] (-) TimerEvent: {}
[10.790665] (-) TimerEvent: {}
[10.891560] (-) TimerEvent: {}
[10.992391] (-) TimerEvent: {}
[11.093264] (-) TimerEvent: {}
[11.194083] (-) TimerEvent: {}
[11.294919] (-) TimerEvent: {}
[11.395758] (-) TimerEvent: {}
[11.496650] (-) TimerEvent: {}
[11.597535] (-) TimerEvent: {}
[11.698326] (-) TimerEvent: {}
[11.799166] (-) TimerEvent: {}
[11.864642] (boat_control_system_final) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:16\x1b[m\x1b[K:\n'}
[11.865657] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/include/boat_control_system_final/RudderServoControlNode.hpp:42:28:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KCoordinateCalculationsNode\x1b[m\x1b[K\xe2\x80\x99 has not been declared\n'}
[11.866310] (boat_control_system_final) StderrLine: {'line': b'   42 |     std_msgs::msg::Float32 \x1b[01;31m\x1b[KCoordinateCalculationsNode\x1b[m\x1b[K::get_magnetometer_heading();\n'}
[11.866949] (boat_control_system_final) StderrLine: {'line': b'      |                            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[11.867495] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/include/boat_control_system_final/RudderServoControlNode.hpp:43:33:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KCoordinateCalculationsNode\x1b[m\x1b[K\xe2\x80\x99 has not been declared\n'}
[11.867974] (boat_control_system_final) StderrLine: {'line': b'   43 |     sensor_msgs::msg::NavSatFix \x1b[01;31m\x1b[KCoordinateCalculationsNode\x1b[m\x1b[K::get_curr_pos();\n'}
[11.868451] (boat_control_system_final) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[11.868922] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/include/boat_control_system_final/RudderServoControlNode.hpp:44:28:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KCoordinateCalculationsNode\x1b[m\x1b[K\xe2\x80\x99 has not been declared\n'}
[11.869547] (boat_control_system_final) StderrLine: {'line': b'   44 |     std_msgs::msg::Float32 \x1b[01;31m\x1b[KCoordinateCalculationsNode\x1b[m\x1b[K::get_wind_angle();\n'}
[11.870066] (boat_control_system_final) StderrLine: {'line': b'      |                            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[11.899398] (-) TimerEvent: {}
[12.000240] (-) TimerEvent: {}
[12.101239] (-) TimerEvent: {}
[12.202067] (-) TimerEvent: {}
[12.302907] (-) TimerEvent: {}
[12.403742] (-) TimerEvent: {}
[12.504660] (-) TimerEvent: {}
[12.605561] (-) TimerEvent: {}
[12.698788] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[KRudderServoControlNode::RudderServoControlNode()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[12.699793] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:46:5:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kwind_subscriber_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kgps_subscriber_\x1b[m\x1b[K\xe2\x80\x99?\n'}
[12.700405] (boat_control_system_final) StderrLine: {'line': b'   46 |     \x1b[01;31m\x1b[Kwind_subscriber_\x1b[m\x1b[K = this->create_subscription<std_msgs::msg::Float32>(\n'}
[12.700917] (boat_control_system_final) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[12.701514] (boat_control_system_final) StderrLine: {'line': b'      |     \x1b[32m\x1b[Kgps_subscriber_\x1b[m\x1b[K\n'}
[12.701988] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:49:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvoid CoordinateCalculationsNode::windCallback(std_msgs::msg::Float32_<std::allocator<void> >::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99 is private within this context\n'}
[12.702461] (boat_control_system_final) StderrLine: {'line': b'   49 |         std::bind(&CoordinateCalculationsNode::\x1b[01;31m\x1b[KwindCallback\x1b[m\x1b[K, this, std::placeholders::_1));\n'}
[12.702986] (boat_control_system_final) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[12.703438] (boat_control_system_final) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/include/boat_control_system_final/Coordinate_Calculations.h:12\x1b[m\x1b[K,\n'}
[12.703909] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:17\x1b[m\x1b[K:\n'}
[12.704382] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/include/boat_control_system_final/CoordinateCalculationsNode.hpp:73:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared private here\n'}
[12.704844] (boat_control_system_final) StderrLine: {'line': b'   73 |     void \x1b[01;36m\x1b[KwindCallback\x1b[m\x1b[K(const std_msgs::msg::Float32::SharedPtr msg);\n'}
[12.705390] (boat_control_system_final) StderrLine: {'line': b'      |          \x1b[01;36m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[12.705875] (-) TimerEvent: {}
[12.788946] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid RudderServoControlNode::turnBoat(sensor_msgs::msg::NavSatFix)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[12.789823] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:134:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 or \xe2\x80\x98\x1b[01m\x1b[K;\x1b[m\x1b[K\xe2\x80\x99 before \xe2\x80\x98\x1b[01m\x1b[Kif\x1b[m\x1b[K\xe2\x80\x99\n'}
[12.790408] (boat_control_system_final) StderrLine: {'line': b'  134 |         \x1b[01;31m\x1b[Kif\x1b[m\x1b[K (abs(turn_angle) <= 1.0f) {\n'}
[12.790960] (boat_control_system_final) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[12.792149] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:157:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kcannot convert \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kfloat\x1b[m\x1b[K\xe2\x80\x99 in initialization\n'}
[12.792832] (boat_control_system_final) StderrLine: {'line': b'  157 |         float current_heading = \x1b[01;31m\x1b[Kget_magnetometer_heading()\x1b[m\x1b[K;\n'}
[12.793428] (boat_control_system_final) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~^~\x1b[m\x1b[K\n'}
[12.793980] (boat_control_system_final) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K|\x1b[m\x1b[K\n'}
[12.794416] (boat_control_system_final) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[Kstd_msgs::msg::Float32 {aka std_msgs::msg::Float32_<std::allocator<void> >}\x1b[m\x1b[K\n'}
[12.806076] (-) TimerEvent: {}
[12.834305] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid RudderServoControlNode::executeWaypoints()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[12.835618] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:177:17:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KcalculateDistance\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[12.836248] (boat_control_system_final) StderrLine: {'line': b'  177 |             if (\x1b[01;31m\x1b[KcalculateDistance\x1b[m\x1b[K(curr_position, latest_waypoint_data_) <= 0.05)\n'}
[12.836750] (boat_control_system_final) StderrLine: {'line': b'      |                 \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[12.837219] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:179:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kcannot convert \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kfloat\x1b[m\x1b[K\xe2\x80\x99\n'}
[12.837803] (boat_control_system_final) StderrLine: {'line': b'  179 |                 setRudderServo(\x1b[01;31m\x1b[Kget_wind_angle()\x1b[m\x1b[K);  // Set rudder to idle if near the destination\n'}
[12.838448] (boat_control_system_final) StderrLine: {'line': b'      |                                \x1b[01;31m\x1b[K~~~~~~~~~~~~~~^~\x1b[m\x1b[K\n'}
[12.839176] (boat_control_system_final) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K|\x1b[m\x1b[K\n'}
[12.840062] (boat_control_system_final) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[Kstd_msgs::msg::Float32 {aka std_msgs::msg::Float32_<std::allocator<void> >}\x1b[m\x1b[K\n'}
[12.840718] (boat_control_system_final) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:16\x1b[m\x1b[K:\n'}
[12.841351] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/include/boat_control_system_final/RudderServoControlNode.hpp:38:31:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  initializing argument 1 of \xe2\x80\x98\x1b[01m\x1b[Kvoid RudderServoControlNode::setRudderServo(float)\x1b[m\x1b[K\xe2\x80\x99\n'}
[12.842043] (boat_control_system_final) StderrLine: {'line': b'   38 |     void setRudderServo(\x1b[01;36m\x1b[Kfloat angle\x1b[m\x1b[K);\n'}
[12.842612] (boat_control_system_final) StderrLine: {'line': b'      |                         \x1b[01;36m\x1b[K~~~~~~^~~~~\x1b[m\x1b[K\n'}
[12.876546] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:194:20:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KcalculateDistance\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[12.877360] (boat_control_system_final) StderrLine: {'line': b'  194 |             while (\x1b[01;31m\x1b[KcalculateDistance\x1b[m\x1b[K(get_curr_pos(), next_waypoint) > 0.05)\n'}
[12.877891] (boat_control_system_final) StderrLine: {'line': b'      |                    \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[12.882739] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32 RudderServoControlNode::get_wind_angle()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[12.883410] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:238:36:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Klatest_wind_data_\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[KRudderServoControlNode\x1b[m\x1b[K\xe2\x80\x99\n'}
[12.883951] (boat_control_system_final) StderrLine: {'line': b'  238 |     return RudderServoControlNode::\x1b[01;31m\x1b[Klatest_wind_data_\x1b[m\x1b[K;\n'}
[12.884388] (boat_control_system_final) StderrLine: {'line': b'      |                                    \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[12.906270] (-) TimerEvent: {}
[13.007046] (-) TimerEvent: {}
[13.107895] (-) TimerEvent: {}
[13.208684] (-) TimerEvent: {}
[13.309716] (-) TimerEvent: {}
[13.410556] (-) TimerEvent: {}
[13.511473] (-) TimerEvent: {}
[13.612380] (-) TimerEvent: {}
[13.713256] (-) TimerEvent: {}
[13.814056] (-) TimerEvent: {}
[13.914885] (-) TimerEvent: {}
[14.015743] (-) TimerEvent: {}
[14.116546] (-) TimerEvent: {}
[14.217475] (-) TimerEvent: {}
[14.318266] (-) TimerEvent: {}
[14.419051] (-) TimerEvent: {}
[14.519881] (-) TimerEvent: {}
[14.620667] (-) TimerEvent: {}
[14.721600] (-) TimerEvent: {}
[14.822417] (-) TimerEvent: {}
[14.923226] (-) TimerEvent: {}
[15.024090] (-) TimerEvent: {}
[15.124991] (-) TimerEvent: {}
[15.225858] (-) TimerEvent: {}
[15.326679] (-) TimerEvent: {}
[15.377670] (boat_control_system_final) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[15.378669] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[15.380226] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[15.381778] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[15.382309] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[15.382831] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[15.383308] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[15.383797] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[15.384307] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[15.384837] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[15.385471] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/include/boat_control_system_final/RudderServoControlNode.hpp:9\x1b[m\x1b[K,\n'}
[15.385984] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:16\x1b[m\x1b[K:\n'}
[15.386474] (boat_control_system_final) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; MessageT = std_msgs::msg::Float32_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[15.387028] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std_msgs::msg::Float32_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Float32_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = std_msgs::msg::Float32_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.387566] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::Float32_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Float32_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std_msgs::msg::Float32_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.388160] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::Float32_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Float32_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.388938] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::Float32_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Float32_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.389912] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:46:73:\x1b[m\x1b[K   required from here\n'}
[15.390670] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:391:22:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>::function(std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.391440] (boat_control_system_final) StderrLine: {'line': b'  391 |       set_deprecated(\x1b[01;31m\x1b[Kstatic_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K);\n'}
[15.392790] (boat_control_system_final) StderrLine: {'line': b'      |                      \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[15.393417] (boat_control_system_final) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[15.393934] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/pstl/glue_algorithm_defs.h:13\x1b[m\x1b[K,\n'}
[15.394442] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/algorithm:74\x1b[m\x1b[K,\n'}
[15.394905] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/std_msgs/std_msgs/msg/detail/string__struct.hpp:8\x1b[m\x1b[K,\n'}
[15.395381] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/std_msgs/std_msgs/msg/string.hpp:7\x1b[m\x1b[K,\n'}
[15.395823] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:6\x1b[m\x1b[K:\n'}
[15.396280] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class _Constraints> std::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = _Functor; _Constraints = _Constraints; _Res = void; _ArgTypes = {std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.396823] (boat_control_system_final) StderrLine: {'line': b'  435 |         \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(_Functor&& __f)\n'}
[15.397459] (boat_control_system_final) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[15.397963] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[15.398430] (boat_control_system_final) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/bits/move.h:57\x1b[m\x1b[K,\n'}
[15.398890] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/stl_pair.h:59\x1b[m\x1b[K,\n'}
[15.399391] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/utility:70\x1b[m\x1b[K,\n'}
[15.399840] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/algorithm:60\x1b[m\x1b[K,\n'}
[15.400299] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/std_msgs/std_msgs/msg/detail/string__struct.hpp:8\x1b[m\x1b[K,\n'}
[15.400745] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/std_msgs/std_msgs/msg/string.hpp:7\x1b[m\x1b[K,\n'}
[15.401266] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:6\x1b[m\x1b[K:\n'}
[15.401789] (boat_control_system_final) StderrLine: {'line': b'/usr/include/c++/11/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using __enable_if_t = typename std::enable_if::type [with bool _Cond = false; _Tp = void]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[15.402334] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:353:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Res, class ... _ArgTypes> template<class _Cond, class _Tp> using _Requires = std::__enable_if_t<_Cond::value, _Tp> [with _Cond = std::function<void(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>::_Callable<std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>&, std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>, std::__invoke_result<std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>&, std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > > > >; _Tp = void; _Res = void; _ArgTypes = {std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.402948] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:434:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; MessageT = std_msgs::msg::Float32_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.403454] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std_msgs::msg::Float32_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Float32_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = std_msgs::msg::Float32_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.404078] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::Float32_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Float32_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std_msgs::msg::Float32_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.404646] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::Float32_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Float32_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.405346] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::Float32_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Float32_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.405966] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:46:73:\x1b[m\x1b[K   required from here\n'}
[15.406423] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/type_traits:2205:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.406879] (boat_control_system_final) StderrLine: {'line': b' 2205 |     using \x1b[01;31m\x1b[K__enable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[15.407346] (boat_control_system_final) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[15.407816] (boat_control_system_final) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[15.408278] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/pstl/glue_algorithm_defs.h:13\x1b[m\x1b[K,\n'}
[15.408784] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/algorithm:74\x1b[m\x1b[K,\n'}
[15.409322] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/std_msgs/std_msgs/msg/detail/string__struct.hpp:8\x1b[m\x1b[K,\n'}
[15.409856] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/std_msgs/std_msgs/msg/string.hpp:7\x1b[m\x1b[K,\n'}
[15.410344] (boat_control_system_final) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:6\x1b[m\x1b[K:\n'}
[15.410839] (boat_control_system_final) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; MessageT = std_msgs::msg::Float32_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[15.411528] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std_msgs::msg::Float32_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Float32_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = std_msgs::msg::Float32_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.412207] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::Float32_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Float32_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std_msgs::msg::Float32_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.412745] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::Float32_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Float32_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.413407] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::Float32_<std::allocator<void> >; CallbackT = std::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Float32_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.414018] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/home/boat/Desktop/src/boat_control_system_final/src/RudderServoControlNode.cpp:46:73:\x1b[m\x1b[K   required from here\n'}
[15.414592] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::function<_Res(_ArgTypes ...)>&&) [with _Res = void; _ArgTypes = {std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.415095] (boat_control_system_final) StderrLine: {'line': b'  404 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(function&& __x) noexcept\n'}
[15.415624] (boat_control_system_final) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[15.416091] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:27:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.416592] (boat_control_system_final) StderrLine: {'line': b'  404 |       function(\x1b[01;36m\x1b[Kfunction&& __x\x1b[m\x1b[K) noexcept\n'}
[15.417071] (boat_control_system_final) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[15.417617] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(const std::function<_Res(_ArgTypes ...)>&) [with _Res = void; _ArgTypes = {std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.418084] (boat_control_system_final) StderrLine: {'line': b'  386 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(const function& __x)\n'}
[15.418567] (boat_control_system_final) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[15.419042] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:32:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::function<void(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>&\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.419527] (boat_control_system_final) StderrLine: {'line': b'  386 |       function(\x1b[01;36m\x1b[Kconst function& __x\x1b[m\x1b[K)\n'}
[15.419976] (boat_control_system_final) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[15.420437] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::nullptr_t) [with _Res = void; _ArgTypes = {std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >}; std::nullptr_t = std::nullptr_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.420929] (boat_control_system_final) StderrLine: {'line': b'  375 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(nullptr_t) noexcept\n'}
[15.421474] (boat_control_system_final) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[15.421959] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (CoordinateCalculationsNode::*(RudderServoControlNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::nullptr_t\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.422543] (boat_control_system_final) StderrLine: {'line': b'  375 |       function(\x1b[01;36m\x1b[Knullptr_t\x1b[m\x1b[K) noexcept\n'}
[15.423021] (boat_control_system_final) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[15.423537] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function() [with _Res = void; _ArgTypes = {std::shared_ptr<std_msgs::msg::Float32_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[15.424021] (boat_control_system_final) StderrLine: {'line': b'  368 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K() noexcept\n'}
[15.424482] (boat_control_system_final) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[15.424953] (boat_control_system_final) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 0 arguments, 1 provided\n'}
[15.426855] (-) TimerEvent: {}
[15.527984] (-) TimerEvent: {}
[15.629177] (-) TimerEvent: {}
[15.730052] (-) TimerEvent: {}
[15.830882] (-) TimerEvent: {}
[15.931832] (-) TimerEvent: {}
[16.032709] (-) TimerEvent: {}
[16.133598] (-) TimerEvent: {}
[16.234468] (-) TimerEvent: {}
[16.335339] (-) TimerEvent: {}
[16.436185] (-) TimerEvent: {}
[16.537054] (-) TimerEvent: {}
[16.637952] (-) TimerEvent: {}
[16.738800] (-) TimerEvent: {}
[16.839673] (-) TimerEvent: {}
[16.940543] (-) TimerEvent: {}
[17.041373] (-) TimerEvent: {}
[17.142170] (-) TimerEvent: {}
[17.242991] (-) TimerEvent: {}
[17.343799] (-) TimerEvent: {}
[17.444646] (-) TimerEvent: {}
[17.545485] (-) TimerEvent: {}
[17.646334] (-) TimerEvent: {}
[17.747156] (-) TimerEvent: {}
[17.848051] (-) TimerEvent: {}
[17.948867] (-) TimerEvent: {}
[18.049814] (-) TimerEvent: {}
[18.150680] (-) TimerEvent: {}
[18.251574] (-) TimerEvent: {}
[18.352440] (-) TimerEvent: {}
[18.453294] (-) TimerEvent: {}
[18.554150] (-) TimerEvent: {}
[18.655019] (-) TimerEvent: {}
[18.755938] (-) TimerEvent: {}
[18.856829] (-) TimerEvent: {}
[18.957763] (-) TimerEvent: {}
[19.058725] (-) TimerEvent: {}
[19.159636] (-) TimerEvent: {}
[19.260487] (-) TimerEvent: {}
[19.361325] (-) TimerEvent: {}
[19.462129] (-) TimerEvent: {}
[19.562898] (-) TimerEvent: {}
[19.663781] (-) TimerEvent: {}
[19.764624] (-) TimerEvent: {}
[19.865459] (-) TimerEvent: {}
[19.966258] (-) TimerEvent: {}
[20.067065] (-) TimerEvent: {}
[20.167940] (-) TimerEvent: {}
[20.268820] (-) TimerEvent: {}
[20.369746] (-) TimerEvent: {}
[20.470570] (-) TimerEvent: {}
[20.571410] (-) TimerEvent: {}
[20.672275] (-) TimerEvent: {}
[20.773130] (-) TimerEvent: {}
[20.873933] (-) TimerEvent: {}
[20.974778] (-) TimerEvent: {}
[21.075580] (-) TimerEvent: {}
[21.176394] (-) TimerEvent: {}
[21.277241] (-) TimerEvent: {}
[21.378037] (-) TimerEvent: {}
[21.479285] (-) TimerEvent: {}
[21.580150] (-) TimerEvent: {}
[21.681084] (-) TimerEvent: {}
[21.782013] (-) TimerEvent: {}
[21.882813] (-) TimerEvent: {}
[21.983595] (-) TimerEvent: {}
[22.084400] (-) TimerEvent: {}
[22.185278] (-) TimerEvent: {}
[22.286059] (-) TimerEvent: {}
[22.386873] (-) TimerEvent: {}
[22.487663] (-) TimerEvent: {}
[22.588464] (-) TimerEvent: {}
[22.689308] (-) TimerEvent: {}
[22.793764] (-) TimerEvent: {}
[22.894574] (-) TimerEvent: {}
[22.995422] (-) TimerEvent: {}
[23.096245] (-) TimerEvent: {}
[23.197151] (-) TimerEvent: {}
[23.297985] (-) TimerEvent: {}
[23.398804] (-) TimerEvent: {}
[23.499612] (-) TimerEvent: {}
[23.600407] (-) TimerEvent: {}
[23.701264] (-) TimerEvent: {}
[23.802065] (-) TimerEvent: {}
[23.902856] (-) TimerEvent: {}
[24.003667] (-) TimerEvent: {}
[24.104523] (-) TimerEvent: {}
[24.205414] (-) TimerEvent: {}
[24.306228] (-) TimerEvent: {}
[24.407041] (-) TimerEvent: {}
[24.507905] (-) TimerEvent: {}
[24.608747] (-) TimerEvent: {}
[24.709621] (-) TimerEvent: {}
[24.810423] (-) TimerEvent: {}
[24.911228] (-) TimerEvent: {}
[25.012092] (-) TimerEvent: {}
[25.112910] (-) TimerEvent: {}
[25.213759] (-) TimerEvent: {}
[25.314558] (-) TimerEvent: {}
[25.415386] (-) TimerEvent: {}
[25.516311] (-) TimerEvent: {}
[25.617160] (-) TimerEvent: {}
[25.717981] (-) TimerEvent: {}
[25.818778] (-) TimerEvent: {}
[25.919655] (-) TimerEvent: {}
[26.020432] (-) TimerEvent: {}
[26.121222] (-) TimerEvent: {}
[26.222045] (-) TimerEvent: {}
[26.322879] (-) TimerEvent: {}
[26.423685] (-) TimerEvent: {}
[26.524482] (-) TimerEvent: {}
[26.625293] (-) TimerEvent: {}
[26.726079] (-) TimerEvent: {}
[26.826881] (-) TimerEvent: {}
[26.927823] (-) TimerEvent: {}
[27.028921] (-) TimerEvent: {}
[27.129708] (-) TimerEvent: {}
[27.230454] (-) TimerEvent: {}
[27.331280] (-) TimerEvent: {}
[27.432037] (-) TimerEvent: {}
[27.532802] (-) TimerEvent: {}
[27.633592] (-) TimerEvent: {}
[27.734321] (-) TimerEvent: {}
[27.835205] (-) TimerEvent: {}
[27.935968] (-) TimerEvent: {}
[28.036774] (-) TimerEvent: {}
[28.137683] (-) TimerEvent: {}
[28.238528] (-) TimerEvent: {}
[28.339432] (-) TimerEvent: {}
[28.440314] (-) TimerEvent: {}
[28.541232] (-) TimerEvent: {}
[28.642023] (-) TimerEvent: {}
[28.742871] (-) TimerEvent: {}
[28.843694] (-) TimerEvent: {}
[28.944515] (-) TimerEvent: {}
[29.045360] (-) TimerEvent: {}
[29.146258] (-) TimerEvent: {}
[29.247103] (-) TimerEvent: {}
[29.347976] (-) TimerEvent: {}
[29.448815] (-) TimerEvent: {}
[29.549729] (-) TimerEvent: {}
[29.650776] (-) TimerEvent: {}
[29.675360] (boat_control_system_final) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/RudderServoControlNode.dir/build.make:76: CMakeFiles/RudderServoControlNode.dir/src/RudderServoControlNode.cpp.o] Error 1\n'}
[29.676581] (boat_control_system_final) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:281: CMakeFiles/RudderServoControlNode.dir/all] Error 2\n'}
[29.678235] (boat_control_system_final) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[29.684614] (boat_control_system_final) CommandEnded: {'returncode': 2}
[29.750995] (-) TimerEvent: {}
[29.851843] (-) TimerEvent: {}
[29.952537] (-) TimerEvent: {}
[29.978156] (boat_control_system_final) JobEnded: {'identifier': 'boat_control_system_final', 'rc': 2}
[29.992986] (-) EventReactorShutdown: {}
